@using Microsoft.AspNetCore.Components.Web
@inherits LayoutComponentBase
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.RazorPages
@using kinoUI.Models
@using kinoUI.Data
@using kinoUI.Controllers
@inject UserController UserController

<div id="app">
    <FixedElement Selector=".top-bar">
        <div class="top-bar">
            <div class="logo">
                <a href="">
                    <img src="img/camera.png" />
                </a>

                <a href="" class="logo_text">
                    Kinogród
                </a>
            </div>

            <div class="links">
                <a href="filmy" class="nav-tab">
                    <!-- href odpowiada za przekierowanie do podstrony
            np. localhost:5000/filmy !-->
                    <div>
                        Filmy
                    </div>
                </a>

                <a href="gatunki" class="nav-tab">
                    <div>
                        Gatunki
                    </div>
                </a>

                <a href="top-filmy" class="nav-tab">
                    <div>
                        Top filmy
                    </div>
                </a>
            </div>
            <div class="searchField">
                <form>
                    <input />
                    <button>
                        Szukaj
                    </button>
                </form>
            </div>
            <div class="accountButtons">
                <button @onclick="show_login_window">
                    Zaloguj się
                </button>
                <button @onclick="show_register_window">
                    Zarejestruj się
                </button>
            </div>


            @if (check_visibility("register"))
            {
                <div class="loginWindowContainer">
                    <div class="loginBorder">
                        <div class="loginContent">
                            <h3 class="loginTitle">Rejestracja</h3>
                            <form>
                                <div class="loginInputs">
                                    <input placeholder="E-mail" id="register_email" @bind="email_input" />
                                </div>
                                <div class="loginInputs">
                                    <input placeholder="Nazwa Użytkownika" id="register_login" @bind="login_input" />
                                </div>
                                <div class="loginInputs">
                                    <input placeholder="Hasło" type="password" id="register_password" @bind="pasword_input" />
                                </div>
                                <div class="loginInputs">
                                    <input placeholder="Powtórz hasło" type="password" id="register_password2" @bind="pasword_input2" />
                                </div>
                                <div class="loginButtons">
                                    <button >Zarejestruj</button>
                                </div>
                                <div class="loginButtons">
                                    <button @onclick="() => close_register_window(false)">Cofnij</button>
                                </div>
                                @if (register_error)
                                {
                                    <div class="loginButtons">
                                        <button>"TEST"</button>
                                    </div>
                                }
                            </form>
                        </div>
                    </div>
                </div>
            }

            @if (check_visibility("login"))
            {
            <div class="loginWindowContainer">
                <div class="loginBorder">
                    <div class="loginContent">
                        <h3 class="loginTitle">Logowanie</h3>
                        <div class="loginInputs">
                            <input type="text" placeholder="Nazwa Użytkownika" />
                        </div>
                        <div class="loginInputs">
                                <input type="password" placeholder="Hasło" />
                            </div>                     
                        <div class="loginButtons">
                            <button @onclick="close_login_window">Zaloguj</button>
                        </div>
                        <div class="loginButtons">
                                <button @onclick="close_login_window">Zarejestruj</button>
                        </div>
                    </div>
                </div>
            </div>
            }

            <!-- Tu będzie EditForm do szukania filmów!-->
        </div>
    </FixedElement>


    <div class="content">
        @Body
    </div>

    <footer>
        &copy; Kinogród @DateTime.UtcNow.Year
    </footer>
</div>

@code {
    private string? SearchString;

    private string email_input;
    private string login_input;
    private string pasword_input;
    private string pasword_input2;

    bool login_window_visible = false;
    bool register_window_visible = false;

    bool register_error = false;


    public void show_register_window()
    {
        register_window_visible = true;
    }

    public void show_login_window()
    {
        login_window_visible = true;
    }

    public void close_login_window()
    {
        login_window_visible = false;
    }

    public bool check_visibility(string selected_window)
    {
        switch(selected_window)
        {
            case "register":
                return register_window_visible;

            case "login":
                return login_window_visible;

            default:
                throw new ArgumentException("Invalid type.");
        }       
    }


    private void Search()
    {

    }


    public void close_register_window(bool adding_user)
    {
        if (adding_user && pasword_input == pasword_input2)
        {
            register_window_visible = false;
            AddUser();
        }
    }

    private async Task AddUser()
    {
        User newUser = new User
            {
                UserName = login_input  ,
                Email = email_input,
                Password = pasword_input
            };

        await UserController.AddUserAsync(newUser);    
    }
}